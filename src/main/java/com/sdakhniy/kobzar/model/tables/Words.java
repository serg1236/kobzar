/*
 * This file is generated by jOOQ.
 */
package com.sdakhniy.kobzar.model.tables;


import com.sdakhniy.kobzar.model.Keys;
import com.sdakhniy.kobzar.model.Public;
import com.sdakhniy.kobzar.model.tables.records.WordsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Words extends TableImpl<WordsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.words</code>
     */
    public static final Words WORDS = new Words();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WordsRecord> getRecordType() {
        return WordsRecord.class;
    }

    /**
     * The column <code>public.words.id</code>.
     */
    public final TableField<WordsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("nextval('id_sequence'::regclass)", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.words.word</code>.
     */
    public final TableField<WordsRecord, String> WORD = createField(DSL.name("word"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.words.letters</code>.
     */
    public final TableField<WordsRecord, String[]> LETTERS = createField(DSL.name("letters"), SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>public.words.unique_number</code>.
     */
    public final TableField<WordsRecord, Integer> UNIQUE_NUMBER = createField(DSL.name("unique_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.words.rank</code>.
     */
    public final TableField<WordsRecord, Double> RANK = createField(DSL.name("rank"), SQLDataType.DOUBLE.nullable(false), this, "");

    private Words(Name alias, Table<WordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Words(Name alias, Table<WordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.words</code> table reference
     */
    public Words(String alias) {
        this(DSL.name(alias), WORDS);
    }

    /**
     * Create an aliased <code>public.words</code> table reference
     */
    public Words(Name alias) {
        this(alias, WORDS);
    }

    /**
     * Create a <code>public.words</code> table reference
     */
    public Words() {
        this(DSL.name("words"), null);
    }

    public <O extends Record> Words(Table<O> child, ForeignKey<O, WordsRecord> key) {
        super(child, key, WORDS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<WordsRecord> getPrimaryKey() {
        return Keys.WORDS_PK;
    }

    @Override
    public List<UniqueKey<WordsRecord>> getKeys() {
        return Arrays.<UniqueKey<WordsRecord>>asList(Keys.WORDS_PK);
    }

    @Override
    public Words as(String alias) {
        return new Words(DSL.name(alias), this);
    }

    @Override
    public Words as(Name alias) {
        return new Words(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Words rename(String name) {
        return new Words(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Words rename(Name name) {
        return new Words(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String[], Integer, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
